import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/lib/mongodb";
import authMiddleware from "@/middlewares/authMiddleware";
import Answer from "@/models/Answer";
import Question from "@/models/Question";
import User from "@/models/User";
import PointTransaction from "@/models/PointTransaction";

export async function POST(req: NextRequest) {
    try {
        await dbConnect();

        // ‚úÖ R√©cup√©rer l'ID de la r√©ponse depuis les param√®tres GET
        const { searchParams } = new URL(req.url);
        const answerId = searchParams.get("id");

        if (!answerId) {
            return NextResponse.json(
                { success: false, message: "ID de la r√©ponse manquant." },
                { status: 400 }
            );
        }

        // ‚úÖ Authentifier l'utilisateur
        const user = await authMiddleware(req);
        if (!user || !user._id) {
            return NextResponse.json(
                { success: false, message: "Non autoris√©. Utilisateur non trouv√©." },
                { status: 401 }
            );
        }

        // ‚úÖ V√©rifier l'existence de la r√©ponse et peupler la question et son auteur
        const answer = await Answer.findById(answerId).populate({
            path: "question",
            populate: { path: "user", select: "username role _id" }, // ‚úÖ Peupler l'auteur de la question
        });

        if (!answer) {
            return NextResponse.json(
                { success: false, message: "R√©ponse non trouv√©e." },
                { status: 404 }
            );
        }

        const question = answer.question;
        if (!question) {
            return NextResponse.json(
                { success: false, message: "Question non trouv√©e." },
                { status: 404 }
            );
        }

        // ‚úÖ V√©rifier si l'utilisateur est autoris√© √† valider la r√©ponse
        const isOwner = user._id.toString() === question.user._id.toString();
        const isStaff = ["Admin", "Correcteur", "Helpeur"].includes(user.role);

        if (!isOwner && !isStaff) {
            return NextResponse.json(
                { success: false, message: "Seul l'auteur de la question ou un membre du staff peut valider une r√©ponse." },
                { status: 403 }
            );
        }

        // ‚úÖ V√©rifier si une autre r√©ponse est d√©j√† marqu√©e comme "Meilleure R√©ponse"
        const existingBestAnswer = await Answer.findOne({
            question: question._id,
            status: "Meilleure R√©ponse",
        });

        // ‚úÖ Cas o√π l'utilisateur est l'auteur de la question ‚Üí il peut choisir UNE seule "Meilleure R√©ponse"
        if (isOwner) {
            if (existingBestAnswer) {
                return NextResponse.json(
                    { success: false, message: "Une r√©ponse est d√©j√† valid√©e comme Meilleure R√©ponse." },
                    { status: 400 }
                );
            }

            // üîπ Marquer la r√©ponse comme "Meilleure R√©ponse"
            answer.status = "Meilleure R√©ponse";
            await answer.save();

            // üîπ Marquer la question comme "R√©solue"
            question.status = "R√©solue";
            await question.save();

            // üîπ Ajouter les points au r√©pondant
            await User.findByIdAndUpdate(answer.user, { $inc: { points: question.points } });

            // üîπ Enregistrer la transaction de points
            await PointTransaction.create({
                user: answer.user,
                question: question._id,
                answer: answer._id,
                action: "validateAnswer",
                type: "gain",
                points: question.points,
                createdAt: new Date(),
            });

            return NextResponse.json(
                { success: true, message: "R√©ponse d√©sign√©e comme Meilleure R√©ponse.", data: answer },
                { status: 200 }
            );
        }

        // ‚úÖ Cas o√π l'utilisateur est un membre du staff ‚Üí Il peut valider plusieurs r√©ponses
        if (isStaff) {
            answer.status = "Valid√©e";
            await answer.save();

            // üîπ Si la question √©tait "Non valid√©e", elle passe en "Valid√©e"
            if (question.status === "Non valid√©e") {
                question.status = "Valid√©e";
                await question.save();
            }

            return NextResponse.json(
                { success: true, message: "R√©ponse valid√©e par le staff.", data: answer },
                { status: 200 }
            );
        }
    } catch (error: any) {
        console.error("‚ùå Erreur lors de la validation de la r√©ponse :", error.message);
        return NextResponse.json(
            { success: false, message: "Impossible de valider la r√©ponse.", details: error.message },
            { status: 500 }
        );
    }
}
